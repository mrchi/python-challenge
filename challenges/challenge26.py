# coding=utf-8

import hashlib
from io import BytesIO
from zipfile import ZipFile

from PIL import Image

# First send email to leopold.moz@pythonchallenge.com, say sorry
# Get clues:
# - my broken zip
# - bbb8b499a0eef99b52c7f13f4e78c24b

# challenge 24
broken_zip_content = b"PK\x03\x04\x14\x00\x00\x00\x08\x00EC\xb22\xe7\x8278\xf1\t\x00\x00\xf3\n\x00\x00\x0c\x00\x15\x00mybroken.gifUT\t\x00\x03\xf2\xd1\x8aB\xf9\xd1\x8aBUx\x04\x00\xe8\x03\xe8\x03\xd5\x93\xfb[\xd3\x85\x1e\x80?\xdf\xfbm\xc8\xa6\\u\xe8\x06\x88Cn\x1b\x82\x91\x9a\xb2\x810\x10m\\DD\xe40\x14\x9d@\xa6\x84\x8a\x97\x8a;\x08\x8bf \x91\xa0\x0e\x04\x14C\x1b(\xc8Q2\xc6]\xbc4\x95\xbc\xa2\x02a^\xc2\xc4\xf4\x18\x84\xd1yz\xce_q\xde\x9f\xde\xe7y\x7f~\x03\x83\x02|\xdeW\x97\xc2Fx\x02\xff\x03\x01@\x010\x00\x1c\x80\x02\xa0\x11\xe0\x100C\xc0\x1c\x01\x01\x02\xd3\x11\x98\x81\x80\x05\x02\x96\x08X!`\x8d\x80-\x02B\x04\xecP\x10\xa3\xe0\x80\x82#\nN(HPpF\xc1\x05\x05W\x14\xdcPpG\xc1\x03\x05)\n2\x14<QX\x80\x82\x17\x06>\x18,\xc6`\t\x06K1\xf0\xc5@\x81\x81\x1f\x06\xfe\x18,\xc7 \x00\x83@\x0c\x94\x18\x04a\x10\x8cC\x08\x0e\xabp\xf8\x10\x07\x15\x0ea8D\xe0\xb0\x1a\x8758D\xe1\xb0\x16\x87h\x1cbpX\x8fC,\x01q\x04\xa8\t\x88'`\x03\x01\t\x04l&`\x0b\x01I\x04|D\xc0V\x02\xb6\x11\xb0\x9d\x80\x14\x02>!a\x07\t;I\xd8EB\x1a\t\xbbI\xd8C\xc2^\x12\xf6\x91\xf0\x19\t\x9f\x93\x90NB\x06\t\x99$d\x91\x90MB.\ty$\xe4\x93P@\x81\x96\x82/((\xa2@GA1\x05\x07)(\xa5\xe0k\n\xca(8DA9\x05\x15\x14\x1c\xa6\xe0\x08\x05Gi\xd0\xd3PIC5\r54\xd4\xd2p\x9c\x86\x134\xd4\xd1p\x92\x86oi\xa8\xa7\xe1\x14\r\xa7i0\xd0\xd0@C#\xf3\x8f\x9c\xa1\xe1,\x03M\x0c43p\x8e\x81\x16\x06\xfe\xcd\xc0y\x06.0\xd0\xca\xc0\xf7\x0c\xb41`d\xa0\x83\x81N\x06\xba\x18\xe8f\xa0\x87\x81^\x06.\xb1\xd0\xc7\xc2e\x16\xae\xb0p\x95\x85k,\x98X\xb8\xce\xc2\r\x16n\xb2\xd0\xcf\xc2O,\xdcb\xe16\x0bwX\xb8\xcb\xc2=\x16\x06Xx\xc0\xc2C\x16\x1eq0\xc8\xc1\x10\x07\xc3\x1c\xfc\xcc\xc1\x08\x07\x8f9\xf8\x85\x83'\x1c<\xe5\xe0\x19\x07\xcf9\xf8\x95\x83Q\x0e^p\xf0\x1b\x07/9\x18\xe3\xe0\x15\x07\xbfs\xf0\x9a\x837<\xf8\x0f\x0f\xde\xf2\xe0\x0f\x1e\x8c\xf3`\x82\x07\x7f\xf2`\x92\x07\xefx\xf0\x17\x0f\xa6x\xf07\xfc? \x9e\xb2\xf4KIP\xa7&l\x14\xed\xda\x92\xaa\x11Eh\x12D\x81A+U\xe0\xfaO\xfdg\x12\xa0\xa7\x00\xa1\x85J\x83\xde\x98E\xcf\x98\x1f\xd3k\xa8\xec\xc8\xe3;\x04W(\x1b\xaa\xba\nm\x16$\x0e\xf46\x1c\xeb\xf9R\xe4W \x0cj\xac\xbeT,\t?\x19s\xa9\xb1\xe6\xf2\xd7\xd2\r}\x15Agj\xaf\x96\xfb|\xf2|\xe0\xd2\x99\xe3?\x1e\xf5\xcdb\xed\x82\xbd\x1eg\xf0}\xab\x95\xc8\xf4a\xdf\xeb\xc7\xd19\xf0\xaax~\x94!\xe2\xb3\xf4%\xe9\xc1o\x80\xaf\xeam/ \x88N\xe7\xdbz1\xba\x7f}\xa1\xab*\xff\x8c<\xa73\xdeea)\xbf\xc5\xd7hqlV\xb3\x8dM\xeb\xb2g\xc2\x9f\x0bGm\xec\xda\x96N\xf2\xa7\xdd\xcf\xab\xcc\xb2\x8d\x18~#v<\xa1{\xac\xd8{\xcd5\xb4\x12\xb6+\x15\x85\x07\x04a'\xe2\x94\x0ek\xf7Rg>\xd8\xe9z\xe7\xe4\xd2\x05W\xf6\xfc\xe2#y#\xca\xa66\xf1\x9f[\x1e:\xd5\x10\x16\xd8|\xeda\xbe\xc4\xab*\xcb\xbc\xa8$\xecA\xf9\x8b\x93\x8d\x1d\xde\xb7b\xf7]\xd0\xdf^}\xd5zr\xf7\x85\xb1\xed#\x1f|b\x98\x1a\xd4\xfb\x8a\xfelSTr\xb6!\xe5\x9fn\x9f/b\xcd\x07\xa3\xb2\xcf\x8f\xc964\xbb\xab\x8d\xaa\xa5\xf6\x08\xeb\x13'\xeb\x99\x93\xffN\xf00\xed\xaf!+\x85 \xe1\xa9\\)\xce\xb0\xf0\xa4\xed\xb3T\x91\xb4xOI\xa8\x7f\xb8E]S\x94\x88\xbc\xf4\xd3l\xb5Qy\xc0\x84)[\x1a\xcb\xa4z\x8d\xf1\x91\x1f3h\xa2\\\xba\xa4yZ\xd9\xb9\x08\xcf\x1c\x9c\xb23\xa0\xb3\xaa\xc7\xdb\xa3?\xae\x9fP\xb0\xb3\\z\xdf\x9a\xc4\xcfl\xabo\xe7\xef;\x98?\x8b\xff\x9d\x17\xc5sX\xe4h\xe2c\xceo#\xb5\xce\xc1\xa9N|\xc4\xe1\xc4\xf5\xbeXU\xaew\x88\xd3r\xfa\t\x1f\xd1e/\x8c\x96g\xd6\\\xba\xb5\x97\xb4\xdb\xb1\\\xe2\xd0\x9e\x89c\x8c\xb3\x1e\xb5<ls\xf3\xa1\x87&\x02\xd2\x11\x8f%\xf6\xda\xc3\xc9])\xd9_q\xb2\xb6y\xea\x9e\xa7j]\xbc\xae\xa0i\xbd<l\"\xb4\xf0\x8b\xab\x7fM\xefFI\xc2\x80\xd8\x1e\xe5\x17\xd7J\xa7\xe2\xbcD\x8a\xb9\x87o\xac\xee\xe3\x99'\xa4_\x8e\xef)Q\xf35M\x9f\xa1\x0f|c3\x88:\x8f\xe8\x16&\x1dfJ\x86\xe7W\x9f\xb5\x10\x07\x9cJ\xb5\xbd\x99WF\xec\xb6\xa6\xd2\xa2R\xd5\x12u\x97\x85\xda\x94\x9a\xfd,\xe5\xae}Ek#'\xeb-\xff\xea`#\x18\xd6$\xb9u\x90R\xa4\xb8\xff\xa1\x91iJ=U\xa5\x90\xd7\x1c.\xbd'\xeb\xec\x9f\x1e\xed1 \x88\x18\x88o\x1d\x95\x98B\x83\xdc\xba\xd4r\xfb\xb0Ig\xa0\x95F\x0f\xcf\xf8\xf1\x86W\xd1\xed\xae2\x1d\x16jP$\xee\xacS\xb1ms\xbe\x9f\x88\xa79\xc2\xe7\x8dc\xd3\xc96k`\xea\xc7\xf6\xae`c\xf6\xb9\xde\x92m\xa6q\xf4\xa2. \xc5$\x9cw3\x87\x9b9\xefD\xb2\xeap?\xbba\x18\x89M\xaeW\xe2\xcb\xc6\x85\xb7d{A\x95\x91w8S\xc3\xb7z4}\xa2`V\xd0\xfcN\xe7\xa6\xce\xb2(cM\x7fQ(\x98E\xe7\xadV\"\x89K\xeeo\x99\x12RCq\x97\xf3\xbb[\xd0\xc0{\x14\xb2\xc2\xcd}\xec{\xe9\x95\xee\x00\x1c\xb0\x92\xfa\xb9n\x91\xe2\x85c\x91I\xb2\x08\xa1?rJE.m\xe9\xcbM\xe6\xf5\xad\xfbP9\xad\xc6\x0c1\xad\x7fOTVvd\xbd{\xcbL\xff6\x8b\x0bw\x82x\xe5c\xab\xda_J\x93}\x12\xba{<p\x83\xdf\x83^m\x83OS\xadO\xba\x0eOK\xdd\xd3g@?j\xff\xd8\xc9\x85\xee\xa4\xc60\x9f\xd0\xf7<\x96'\x8f\xe6)\xecl\x8e\xd4\x8a\x19L\xca6]\xb0P\x97\x8a\xda\xfcL\x01\x0f\xf6\x0b\x8d/e\xdf\xb8\xbcI\xb7p:\xbe\xb6\xb0\x053\x9a9[n\x8d\xb6\xf9!V\x84\x85hNY\xfb\xdb\xf8i\x8a\x8c\x85\x8d\xaf\xba\xac\x1b\xd6\xe5\xa3\x05*I\xdbD\xa2h\xf2y\x84E\x89\xbf{\xe2\xe3A\xb3\xd2I\x1b\xa7\x10=\x1dk\x14\xa7VNd\xff.\x8c\xcf\xf0\x1am\xdf\xb1\xec2&\x9f\xad>\x1e;*\xc7H\xf9\x8f\xf1\x89\xfd\xe5\x8f\xf6\xc9\xad\xa6v$u\x98mm(S\xedk\xfb<\xd59`\xba}\x18X\x0b3\xad\xa5Kry\xd4\r\xca\xa6 \xc1*e\x10i%\xd1\x85\x17\xb7e\x9a\x95\xa6\x13\xd2\xdc\x8ds\xd4\xad\x9b\xc8\xa4\xd7k-n\xf4\x96\xc6'W\x12\xe4\xba\x10g\x03q\x00\xebO\x17|\xc9^%\x88\xb0\xdcQ}&#\x94\xa6+R\x95eJ\xfe\xa0\x84\x97\xc2\xdf\xe4\xd5a\x0b\xb4\xce#r#\xe7r\xbe\xad\xb0\xcb\x94\x89\xaf\xe8up\xbc.=0\xf0Nl\xed?|\xd4\xb7\x80\xdfeC\xa7\x88\x87\x8f]\xf60\xb4\x1d\xcbIUm\xb1\xb6\xc7\xed\xe9\xa1\xfc\xf0\x11{\xefu.\x01\xae(\x82/\xce\x0e\x98A\xe9\xfd4i\x95Yy4\xcbf\xeb\x97;\xee\x0f\xbd\xc8\xf7\xd1y\x9c\xdfvH\xfef\xf0\xfc\xbf,\x86qf\x11-\x9e@\xb5A\x82\x11d\xc1\t\x85\xf0\x9d*\x7f\xa9\t\xe1)4}\x0b\x9fUq\x81\xef\xec\xbd\xea\xf4\xe9\xf8jC\xf6\xfbi\xedV\x9a\xa9\xc4/%%\xa9\xe9\xc1\xb9\xdd\x1a3\xe7,\xcb\xc0\x86\xcc\xf0\xd9\xd9_\xa4f\xe4\x98\x8b\x86\xf3\x94\xee\x01\x82\xbb^J\xc2 b>\xbf\x17\xc4\x90\xa1\x82\xefN\x0f\xea\xec\xc7\xed\x17\xd7\xa6\xc9\xfd)\xb4\xa9\xeb]\xbcYA\xa2Rxb\x87V\xa6\xdb\xc4\xd3\x8fZ8E*u\x91\xd9\x9bl\xfeNT\xd2\xca\xebG\xd6\xf9\xdb/(7\xde\xba\xa2\xd8\xc0\x8b\x8d\xa82\xdf\xaeo\xe7i\xa2\xf9\xf3Gn\xaejmY\xa1H\xd4\x17D7\xa1\x14\xf5\xcd\xe5\xf8=\xf2\x9eq\xc3P\xda]\xb5\x99\x87cFNI\xa4k}\xaf$\xc0]\x850\xd8\xfe\xbc%P\x86\xf0\x17{/\xca\xa97Vmy\x9ecY\xb1\xb0\xd0t\x07\xb5w\xe9\xc5\xabSd\xb9\xd7z\xbf\r\xc7]\x08\xa1*\x0e(\xaf\xaa\xf0vi\x96\x171\x9c\x7f\xbc\x88\xb6\xd9\xa0\xa9\x91k\x043\xa3\xfb\x1b\xe8\xe8\x95\xc5\xf3\x13\x01\xbe\xab\x18\xde\xb0\x9f\x8f \xb9|\x85$!\x1e\xe7\xea\xa6\x92\x0fiC9w\x7f\x91\xf8\xd3\xf5W\\\xed\xbf\xaax\\\xbd\xdf:)?X\xb0j\xc8d\xd2d \xac\xc4\x7f{\x87g\xe1l\xedY\xd1.\xbb\xeb\xb2m\x07\xa8\x19\x9d\xae\xe2\x8a\xa6j\xff\x94p:\xce\xb7\xce\xa6H\x14i\x9e\xd6\xe7\x11\x12#:]\x93~\xc3]\xa7\xaf\xc9Qy/\xee\x90\xe4\xd8\x06\x8c\rd^9(m\xd4\xe7\xa3:~\xcfh\xfa\xd7\"<-\xc3y\xfc1g^\xf2\x96~?i\x9a,\xc6\x88\xfb\xca\xfc\x11\xe9z\xad,n(\xcf1D+\xbe;W\xbb\xd9e\x18\x8b:K\xb5\x10\xb26V\xfbS\x1d\x1aH\xd0\x19\xf9\x84\xf9\x9a\x19\xda5\xfd\xc6\xf3\xe6\xdfh\x96;\xf4\xf8\xaa\xae\x9c\xbb\xc8^rS\xef\\w\x00\x13\x8a\xcfV\xda\x9e\x1a\r\x8e\xcb\xfbA\xde\xd7\xda\xc9f\xf0\xdb|\xf3\x96\xc6\xd0\x82\x8c2?+\xbe\xa3@\xee6\xc4\xdb\xe5\xb3y\xd1\xbc\x0b:\xde\xeb\x84\x0e\xcb\xdd\xbe\x02O$\xf2\"\xbf\xf9[l\xb7o7\x7f\xb6\x80\xb7\xd8n\x8d\xe4\x8f\xc7+>\xf3\x18v\x101A\xde\xf1s\x93\x82gxf8yUYu\xe7oL\xdc^Q|\xd2=\xc0r\xa6|c\xd6l\xbc?\xc0sD\xb2\xa2\xb6c\x8eSC\x01yznC\xa1\xb7D%\x11\xcc\x0c\x1e\x19Y\xe6\xd3\xdb.D\x91\x04\xe7\xf0\xdd\x92\xe4\xb4\xda(\xad\x91|=\xd8I\xfa\xc6\xaepM\x1e|^.i\xe3%D\x16\xdb\x9ab~-\x8b\x10\x99\x8d\x8f\x16\xba\xdd0<\x89\xbd\xed\x8fxGe9\x08\x1brg\x8e\xdd\xbbc*j>{|\xe5\x8b\xc4u\x93\xf7\xee\\kn>w\xf5\xc5\xd6\xbd\x93\xf7\x07\xa7\x9dk\xe9Y\xf9[J\xf9\xe4\xc0\xd3U\xe7\xce\xdf\xbe\xfa\xdb\xce\x0b\x93\x0f\xc6\x8a\xce\xb5>Y\xf9r\xcf\xfd\xc9\x87\x83\xd3hX\xfc_PK\x01\x02\x17\x03\x14\x00\x00\x00\x08\x00EC\xb22\xe7\x8278\xf1\t\x00\x00\xf3\n\x00\x00\x0c\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00mybroken.gifUT\x05\x00\x03\xf2\xd1\x8aBUx\x00\x00PK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00G\x00\x00\x000\n\x00\x00\x00\x00"
hash = "bbb8b499a0eef99b52c7f13f4e78c24b"


def repair_broken_zip(broken_zip_content: bytes, hash: str):
    for pos in range(len(broken_zip_content)):
        for char in range(256):
            content = (
                broken_zip_content[:pos] + bytes([char]) + broken_zip_content[pos + 1 :]
            )
            if hashlib.md5(content).hexdigest() == hash:
                return content


content = repair_broken_zip(broken_zip_content=broken_zip_content, hash=hash)
with ZipFile(BytesIO(content)) as zip:
    print(zip.filelist)
    with zip.open("mybroken.gif") as f:
        with Image.open(f) as im:
            im.show()


answer = "speed" + "boat"
print(f"http://butter:fly@www.pythonchallenge.com/pc/hex/{answer}.html")
